package com.snowplowanalytics.snowplow.collector.core

import org.typelevel.log4cats.Logger
import org.typelevel.log4cats.slf4j.Slf4jLogger

import org.apache.commons.codec.digest.DigestUtils

import cats.data.NonEmptyList
import cats.implicits._

import cats.effect.{Async, Resource, Sync}
import cats.effect.std.Random

import fs2.Stream

import org.http4s.client.{Client => HttpClient}

import _root_.io.circe.Json
import _root_.io.circe.syntax._

import com.snowplowanalytics.iglu.core.{SchemaKey, SchemaVer, SelfDescribingData}

import com.snowplowanalytics.snowplow.scalatracker.{Tracker, Tracking}
import com.snowplowanalytics.snowplow.scalatracker.Emitter._
import com.snowplowanalytics.snowplow.scalatracker.Emitter.{Result => TrackerResult}
import com.snowplowanalytics.snowplow.scalatracker.emitters.http4s.Http4sEmitter

object Telemetry {

  implicit private def unsafeLogger[F[_]: Sync]: Logger[F] =
    Slf4jLogger.getLogger[F]

  def run[F[_]: Async: Tracking](
    telemetryConfig: Config.Telemetry,
    httpClient: HttpClient[F],
    appInfo: AppInfo,
    appId: String,
    telemetryInfoF: F[TelemetryInfo]
  ): Stream[F, Unit] =
    if (telemetryConfig.disable)
      Stream.empty.covary[F]
    else
      for {
        telemetryInfo <- Stream.eval(telemetryInfoF)
        sdj = makeHeartbeatEvent(telemetryConfig, appInfo, appId, telemetryInfo)
        tracker <- Stream.resource(initTracker(telemetryConfig, appInfo.moduleName, httpClient))
        _ <- Stream.fixedDelay[F](telemetryConfig.interval).evalMap { _ =>
          tracker.trackSelfDescribingEvent(unstructEvent = sdj) >> tracker.flushEmitters()
        }
      } yield ()

  private def initTracker[F[_]: Async: Tracking](
    config: Config.Telemetry,
    appName: String,
    client: HttpClient[F]
  ): Resource[F, Tracker[F]] =
    for {
      random <- Resource.eval(Random.scalaUtilRandom[F])
      emitter <- {
        implicit val r: Random[F] = random
        Http4sEmitter.build(
          EndpointParams(config.url, port = Some(config.port), https = config.secure),
          client,
          retryPolicy = RetryPolicy.MaxAttempts(10),
          callback    = Some(emitterCallback[F] _)
        )
      }
    } yield new Tracker(NonEmptyList.of(emitter), "tracker-telemetry", appName)

  private def emitterCallback[F[_]: Sync](
    params: EndpointParams,
    req: Request,
    res: TrackerResult
  ): F[Unit] =
    res match {
      case TrackerResult.Success(_) =>
        Logger[F].debug(s"Telemetry heartbeat successfully sent to ${params.getGetUri}")
      case TrackerResult.Failure(code) =>
        Logger[F].warn(s"Sending telemetry hearbeat got unexpected HTTP code $code from ${params.getUri}")
      case TrackerResult.TrackerFailure(exception) =>
        Logger[F].warn(
          s"Telemetry hearbeat failed to reach ${params.getUri} with following exception $exception after ${req.attempt} attempts"
        )
      case TrackerResult.RetriesExceeded(failure) =>
        Logger[F].error(s"Stopped trying to send telemetry heartbeat after following failure: $failure")
    }

  private def makeHeartbeatEvent(
    teleCfg: Config.Telemetry,
    appInfo: AppInfo,
    appId: String,
    telemetryInfo: TelemetryInfo
  ): SelfDescribingData[Json] =
    SelfDescribingData(
      SchemaKey("com.snowplowanalytics.oss", "oss_context", "jsonschema", SchemaVer.Full(1, 0, 2)),
      Json.obj(
        "userProvidedId"     -> teleCfg.userProvidedId.asJson,
        "autoGeneratedId"    -> teleCfg.autoGeneratedId.asJson,
        "moduleName"         -> teleCfg.moduleName.asJson,
        "moduleVersion"      -> teleCfg.moduleVersion.asJson,
        "instanceId"         -> teleCfg.instanceId.asJson,
        "appGeneratedId"     -> appId.asJson,
        "cloud"              -> telemetryInfo.cloud.asJson,
        "region"             -> telemetryInfo.region.asJson,
        "installationId"     -> telemetryInfo.hashedInstallationId.asJson,
        "applicationName"    -> appInfo.moduleName.asJson,
        "applicationVersion" -> appInfo.version.asJson
      )
    )

  /**
    * Stores destination specific telemetry data
    * @param region Cloud region application is deployed
    * @param cloud Cloud application is deployed
    * @param unhashedInstallationId Unhashed version of id that is used identify pipeline.
    *                           It should be something unique to that pipeline such as account id, project id etc.
    */
  case class TelemetryInfo(
    region: Option[String],
    cloud: Option[String],
    unhashedInstallationId: Option[String]
  ) {
    def hashedInstallationId: Option[String] = unhashedInstallationId.map(DigestUtils.sha256Hex)
  }
}
